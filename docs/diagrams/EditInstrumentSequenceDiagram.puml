@startuml
'https://plantuml.com/class-diagram
!include Styles.puml

box console COLOR_CONSOLE_SEGMENT
participant ":InputParser" as InputParser COLOR_CONSOLE
participant ":EditInstrumentParser" as EditInstrumentParser COLOR_MODEL
end box

box command COLOR_FAINT_GREEN
participant ":EditInstrumentCommand" as EditInstrumentCommand COLOR_COMMANDS
end box

box model COLOR_MODEL_SEGMENT
participant ":Stock" as Instrument COLOR_MODEL
end box

box ui COLOR_LIGHT_BLUE
participant "<<Class>>\n:TextUi" as TextUi COLOR_UI
end box

[-> InputParser : filterByCommandType({"edit", "1"},\n instruments)
activate InputParser

InputParser -> InputParser: getEditInstrumentCommand({"edit", "1"},\n instruments)
activate InputParser

InputParser -> InputParser: getAndValidateIndexNumber({"edit", "1"}, instrument)

activate InputParser
InputParser --> InputParser
deactivate InputParser

InputParser -> TextUi: displayEditInstrumentFirstInstruction(Stock)
activate TextUi
TextUi --> InputParser
deactivate TextUi

InputParser -> Instrument: getValidAttribute()
activate Instrument
Instrument --> InputParser: return validAttributes
deactivate Instrument

InputParser -> InputParser: getParametersToEdit(validAttributes)
activate InputParser

InputParser -> InputParser: filterInvalidParameters({"name"}, validAttributes)
note right: Prompt user to enter in parameters and\ncheck if parameters entered are valid.\nError is thrown if there is no input.\nvalidAttributes for Stock are Name,\nCurrent Price, Sentiment and Remarks.
activate InputParser
InputParser --> InputParser: return filteredParameters
deactivate InputParser
InputParser --> InputParser: return filteredParameters
deactivate InputParser

create EditInstrumentParser
InputParser -> EditInstrumentParser: EditInstrumentParser()
activate EditInstrumentParser
EditInstrumentParser --> InputParser
deactivate EditInstrumentParser

InputParser -> EditInstrumentParser: createEditCommand({"name"}, instrument, 1);
activate EditInstrumentParser

ref over EditInstrumentParser
check if parameter is entered and add to HashMap
endref

create EditInstrumentCommand
EditInstrumentParser -> EditInstrumentCommand: EditInstrumentCommand()
activate EditInstrumentCommand
EditInstrumentCommand --> EditInstrumentParser
deactivate EditInstrumentCommand

EditInstrumentParser -> EditInstrumentCommand: setIndex(1)
activate EditInstrumentCommand
EditInstrumentCommand --> EditInstrumentParser
deactivate EditInstrumentCommand

EditInstrumentParser --> InputParser: return editInstrumentCommand
deactivate EditInstrumentParser

InputParser --> InputParser: return editInstrumentCommand
deactivate InputParser
[<--InputParser: return editInstrumentCommand
deactivate InputParser

@enduml